{"version":3,"file":"etd-library.js","sources":["ng://etd-library/lib/models/department.ts","ng://etd-library/lib/models/documentType.ts","ng://etd-library/lib/models/responseData.ts","ng://etd-library/lib/models/singleDocument.ts","ng://etd-library/lib/services/interceptor.service.ts"],"sourcesContent":["export interface Department {\n  id: number;\n  name: string;\n  createdAt?: string;\n  updatedAt?: string;\n  collegeId?: number;\n}\n","export interface DocumentType {\n  text: string;\n  value: string | number;\n}\n\nexport interface sortType extends DocumentType {}\n","export interface ResponseData {\n  code: number;\n  data: any;\n  message: string;\n  status: boolean;\n  timestamp: number;\n}\n\nexport interface Pagination {\n  currentPage: number;\n  lastPage: number;\n  currentCount: number;\n  totalCount: number;\n}\n\nexport interface PageData {\n  page: number;\n  size: number;\n}\n","export interface SingleDocument {\n  id?: number;\n  title?: string;\n  author?: string;\n  url?: string;\n  degreeId?: number;\n  type?: number;\n  views?: number;\n  tags?: string[];\n  abstract?: string;\n  advisors?: string[];\n  downloads?: number;\n  subject?: string;\n  matNumber?: string;\n  departmentId?: number;\n  graduationYear?: number;\n  submissionYear?: number;\n  createdAt?: string;\n  updatedAt?: string;\n  collegeId?: number;\n}\n","import { Injectable } from \"@angular/core\";\nimport { Observable, throwError } from \"rxjs\";\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from \"@angular/common/http\";\nimport { AuthService } from \"library\";\nimport { catchError } from \"rxjs/operators\";\n@Injectable({\n  providedIn: \"root\"\n})\nexport class InterceptorService implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const authenticatedUser = this.authService.getAuthenticatedUser();\n    if (authenticatedUser) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${authenticatedUser.token}`\n        },\n\n        body: { ...request.body, collegeId: authenticatedUser[\"collegeId\"] }\n      });\n    }\n    return next.handle(request).pipe(\n      catchError((err: any) => {\n        if (err.status === 401) {\n          this.authService.logout();\n        }\n        return throwError(err);\n      })\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,yBAMC;;;IALC,wBAAW;;IACX,0BAAa;;IACb,+BAAmB;;IACnB,+BAAmB;;IACnB,+BAAmB;;;;;;;;;;ACLrB,2BAGC;;;IAFC,4BAAa;;IACb,6BAAuB;;;;;AAGzB,uBAAiD;;;;;;;;;ACLjD,2BAMC;;;IALC,4BAAa;;IACb,4BAAU;;IACV,+BAAgB;;IAChB,8BAAgB;;IAChB,iCAAkB;;;;;AAGpB,yBAKC;;;IAJC,iCAAoB;;IACpB,8BAAiB;;IACjB,kCAAqB;;IACrB,gCAAmB;;;;;AAGrB,uBAGC;;;IAFC,wBAAa;;IACb,wBAAa;;;;;;;;;;ACjBf,6BAoBC;;;IAnBC,4BAAY;;IACZ,+BAAe;;IACf,gCAAgB;;IAChB,6BAAa;;IACb,kCAAkB;;IAClB,8BAAc;;IACd,+BAAe;;IACf,8BAAgB;;IAChB,kCAAkB;;IAClB,kCAAoB;;IACpB,mCAAmB;;IACnB,iCAAiB;;IACjB,mCAAmB;;IACnB,sCAAsB;;IACtB,wCAAwB;;IACxB,wCAAwB;;IACxB,mCAAmB;;IACnB,mCAAmB;;IACnB,mCAAmB;;;;;;;;ICLnB,4BAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;KAAI;;;;;;IAEhD,sCAAS;;;;;IAAT,UACE,OAAyB,EACzB,IAAiB;QAFnB,iBAsBC;;YAlBO,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,oBAAoB,EAAE;QACjE,IAAI,iBAAiB,EAAE;YACrB,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;gBACtB,UAAU,EAAE;oBACV,aAAa,EAAE,YAAU,iBAAiB,CAAC,KAAO;iBACnD;gBAED,IAAI,eAAO,OAAO,CAAC,IAAI,IAAE,SAAS,EAAE,iBAAiB,CAAC,WAAW,CAAC,GAAE;aACrE,CAAC,CAAC;SACJ;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC9B,UAAU;;;;QAAC,UAAC,GAAQ;YAClB,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;gBACtB,KAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;aAC3B;YACD,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;SACxB,EAAC,CACH,CAAC;KACH;;gBA5BF,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;gBAJQ,WAAW;;;6BARpB;CAUA,IA6BC;;;;;;IAzBa,yCAAgC;;;;;;;;;;;;;;;"}